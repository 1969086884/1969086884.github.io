<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>译文:在一百万个网站中发现 XSS (cPanel CVE-2023-29489)</title>
    <link href="/2023/07/30/%E8%AF%91%E6%96%87-%E5%9C%A8%E4%B8%80%E7%99%BE%E4%B8%87%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8F%91%E7%8E%B0-XSS-cPanel-CVE-2023-29489/"/>
    <url>/2023/07/30/%E8%AF%91%E6%96%87-%E5%9C%A8%E4%B8%80%E7%99%BE%E4%B8%87%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8F%91%E7%8E%B0-XSS-cPanel-CVE-2023-29489/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">  <blockquote><p>博客备份，本文翻译原文地址为 <a href="https://blog.assetnote.io/2023/04/26/xss-million-websites-cpanel/">https://blog.assetnote.io/2023/04/26/xss-million-websites-cpanel/</a></p></blockquote><p>cPanel 是一款控制面板软件，在互联网上广泛使用。确切地说，在写这篇博客文章的时候，大约有140万个cPanel 安装在外部互联网上。<br>我们发现了一个反射型XSS漏洞，可以在没有任何身份验证的情况下被利用。除此之外，无论 cPanel 管理端口(2080,2082,2083,2086)是否暴露在外部，XSS漏洞都是可利用的。这意味着如果你的网站是由 cPanel 管理的，那么你在80和443端口的网站也容易受到此跨站脚本漏洞的攻击。<br>对于那些担心自己的网站受到这个漏洞影响的人，也不要担心，因为互联网上很多 cPanel 在安装时都启用了 cPanel 的自动更新功能，这意味着可能不再容易受到攻击。如果没有设置这个特性，请阅读这个链接<a href="https://support.cpanel.net/hc/en-us/articles/360053076314-How-to-re-enable-automatic-updates">https://support.cpanel.net/hc/en-us/articles/360053076314-How-to-re-enable-automatic-updates</a>，了解如何启用它。<br>也可以在<a href="https://forums.cpanel.net/threads/cpanel-tsr-2023-0001-full-disclosure.708949/">https://forums.cpanel.net/threads/cpanel-tsr-2023-0001-full-disclosure.708949/</a>阅读 cPanel官方对于此xss漏洞的处置建议。</p><h3 id="熟悉cPanel代码"><a href="#熟悉cPanel代码" class="headerlink" title="熟悉cPanel代码"></a>熟悉cPanel代码</h3><p>cPanel 和我在这个世界上存在的时间一样长(设计于1996年) ，只有27年多一点。这可能是我们审计过的最古老的软件之一。<br>cPanel 的历史就意味着它所利用的许多范式和技术并不一定是现代的。大多数 cPanel功能都是用 Perl 编写的，其中有一些是用 Perl 编译成的二进制文件。<br>我们去年年中开始研究 cPanel 时，我们主要关注的是可以在 cPanel 管理口<code>/cgi-sys/</code>目录下可以访问的二进制文件。这些二进制文件由Perl代码编译而成，可以通过 HTTP 请求进行远程调用。理解这些二进制文件的逻辑是困难的。虽然我们找到了几种可以利用的途径，但是我们发现内置的缓解方法阻碍了我们成功地利用这些潜在的问题。<br>除了这个目录中的这些二进制文件之外，我们还注意到 cPanel 的核心功能和 Web 应用程序是通过<strong>cpsrvd</strong>二进制文件提供服务的。这个二进制文件监听以下端口:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@vm:~<span class="hljs-comment"># lsof -Pi | grep cpsrvd</span><br>cpsrvd    43328     root    3u  IPv4 218993      0t0  TCP *:2082 (LISTEN)<br>cpsrvd    43328     root    4u  IPv4 218994      0t0  TCP *:2086 (LISTEN)<br>cpsrvd    43328     root    5u  IPv4 218995      0t0  TCP *:2083 (LISTEN)<br>cpsrvd    43328     root    6u  IPv4 218996      0t0  TCP *:2087 (LISTEN)<br></code></pre></td></tr></table></figure><p>cPanel 使用了Apache http的反向代理功能，其配置文件位置为<code>/etc/apache2/conf/httpd.conf</code>。这个文件为我们提供了很多线索和上下文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">ProxyPass /cpanelwebcall/ http://127.0.0.1:2082/cpanelwebcall/ max=1 retry=0<br><br>... omitted <span class="hljs-keyword">for</span> brevity ...<br><br>ScriptAlias /.cpanel/dcv /usr/<span class="hljs-built_in">local</span>/cpanel/cgi-priv/get_local.cgi<br><br>RewriteEngine On<br><br>RewriteCond %&#123;REQUEST_URI&#125; ^/\.well-known/acme-challenge/[0-9a-zA-Z_-]+$ [OR]<br>RewriteCond %&#123;REQUEST_URI&#125; ^/\.well-known/cpanel-dcv/[0-9a-zA-Z_-]+$ [OR]<br>RewriteCond %&#123;REQUEST_URI&#125; ^/\.well-known/pki-validation/[A-F0-9]&#123;32&#125;\.txt(?:\ Sectigo\ DCV)?$ [OR]<br>RewriteCond %&#123;REQUEST_URI&#125; ^/\.well-known/pki-validation/(?:\ Ballot169)?<br>RewriteRule ^ /.cpanel/dcv [passthrough]<br></code></pre></td></tr></table></figure><p>以上只是 httpd.conf 文件的一小部分摘录。如果您正在考虑审计 cPanel，我们建议从这个文件中的所有不同代理规则开始。<br>值得庆幸的是，cPanel 确实附带了大量源代码，当你安装好cPanel之后，就可以在<code>/usr/local/cpanel/</code>路径获取大量源码。虽然这也是大多数二进制文件存在的地方，但是仍然可以通过从这个目录中存在的 perl 代码来理解cPanel的一些逻辑。<br>尽管该文件夹中的perl代码包含了大量关于路由如何工作的线索，但是真相的来源仍然是cpsrvd二进制文件，它似乎是所有Perl代码的编译版本。在<code>/usr/local/cpanel</code>目录中找到的源代码看起来并不包含cPanel提供的所有完整功能。尽管如此，我们还是很感激这一点，因为它为我们提供了足够的信息来发现XSS漏洞。</p><h3 id="解构Httpd-pm"><a href="#解构Httpd-pm" class="headerlink" title="解构Httpd.pm"></a>解构Httpd.pm</h3><p>在试图理解cPanel的路由时，我们注意到了<code>Cpanel/Server/Handlers/Httpd.pm</code>，其中包含对某些路径具体的处理。这种逻辑使我们能够在不必理解二进制文件的情况下，了解到一个功能和路由的关系。<br>文件顶部的注释给了一个很好的概述:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">=head1 DESCRIPTION</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">This module implements a tiny HTTP server in cpsrvd that executes a</span><br><span class="hljs-comment">whitelist of functionality.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">This is useful for contexts where no other service is running on the standard</span><br><span class="hljs-comment">HTTP and HTTPS ports.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">It implements the following behaviors:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">=over</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">=item * Any request whose path is under F&lt;/.well-known&gt; is served as a</span><br><span class="hljs-comment">static file. The path on disk that’s loaded is the same as under Apache.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">=item * Any other request whose C&lt;Host&gt; header starts with one of the</span><br><span class="hljs-comment">following is served as appropriate: C&lt;cpcalendars.&gt;, C&lt;cpcontacts.&gt;,</span><br><span class="hljs-comment">C&lt;autodiscover.&gt;, C&lt;autoconfig.&gt;. The latter two are only served if</span><br><span class="hljs-comment">they are enabled in the server configuration.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Note that C&lt;cpanel.&gt;, C&lt;whm.&gt;, and C&lt;webmail.&gt; are NOT handled here.</span><br><span class="hljs-comment">This is largely because the relevant applications are under base cpsrvd</span><br><span class="hljs-comment">and thus not (readily) callable from this module, so we have to handle</span><br><span class="hljs-comment">those applications separately.</span><br></code></pre></td></tr></table></figure><p>在这个 Perl 代码中可以找到以下功能:</p><ul><li>基于特定服务处理当前域和子域的路由（Handling subdomain/hostname based routing to certain services）<ul><li>cpcalendars =&gt; ‘proxy_cpcalendars_cpcontacts’</li><li>cpcontacts =&gt; ‘proxy_cpcalendars_cpcontacts’</li><li>autodiscover =&gt; ‘autodiscover’</li><li>autoconfig =&gt; ‘autoconfig’</li></ul></li><li>处理静态文件（Handling static paths）<ul><li>/img-sys/</li><li>/sys_cpanel/</li></ul></li><li>针对cpanel, whm, webmail进行重定向(Handling redirects for /cpanel, /whm, /webmail)</li><li>处理BoxTrapper相关请求（Handling <a href="https://docs.cpanel.net/cpanel/email/boxtrapper/">BoxTrapper</a> requests /cgi-sys/bxd.cgi）</li><li>调用/cpanelwebcall/处理动态DNS相关功能（Handling Dynamic DNS related functionality, specifically calls to /cpanelwebcall/）</li></ul><p>除了 Httpd.pm，我们还在处理 websocket 消息的<code>Cpanel/Server/Handlers/comet.pm</code>上花费了大量时间。其中有很多有趣的功能，似乎可以导致任意的文件写入，但在我们分配给 cPanel 研究的时间里，我们没能找到一个具有任何有意义的sink。</p><h3 id="寻找XSS"><a href="#寻找XSS" class="headerlink" title="寻找XSS"></a>寻找XSS</h3><p>在 Httpd.pm 中，我们可以看到以下代码片段:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">elsif</span> ( <span class="hljs-number">0</span> == <span class="hljs-keyword">rindex</span>( $doc_path, <span class="hljs-string">&#x27;/cpanelwebcall/&#x27;</span>, <span class="hljs-number">0</span> ) ) &#123;<br><br>        <span class="hljs-comment"># First 15 chars are “/cpanelwebcall/”</span><br>        _serve_cpanelwebcall(<br>            $self-&gt;get_server_obj(),<br>            <span class="hljs-keyword">substr</span>( $doc_path, <span class="hljs-number">15</span> ),<br>        );<br>    &#125;<br></code></pre></td></tr></table></figure><p>这意味着以<code>/cpanelwebcall/</code>开头的任何路径都将被路由到<code> _service_cpanelwebcall</code><br><code>_service_cpanelwebcall</code>函数实现如下所示:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-function"><span class="hljs-keyword">sub</span> _<span class="hljs-title">serve_cpanelwebcall</span> ( $<span class="hljs-title">server_obj</span>, $<span class="hljs-title">webcall_uri_piece</span> ) </span>&#123;<br>    <span class="hljs-keyword">require</span> Cpanel::Server::WebCalls;<br>    <span class="hljs-keyword">my</span> $out = Cpanel::Server::WebCalls::handle($webcall_uri_piece);<br><br>    $server_obj-&gt;respond_200_ok_text($out);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中调用了<code>Cpanel::Server::WebCalls::handle</code>，其实现如下</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">handle</span> ($<span class="hljs-title">request</span>) </span>&#123;<br><br>    <span class="hljs-keyword">my</span> $id = extract_id_from_request($request);<br>    <span class="hljs-keyword">substr</span>( $request, <span class="hljs-number">0</span>, <span class="hljs-keyword">length</span> $id ) = <span class="hljs-string">q&lt;&gt;</span>;<br><br>    Cpanel::WebCalls::ID::is_valid($id) <span class="hljs-keyword">or</span> <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">die</span> _http_invalid_params_err(<span class="hljs-string">&quot;Invalid webcall ID: $id&quot;</span>);<br>    &#125;;<br></code></pre></td></tr></table></figure><p>Handle中又调用了<code>_http_invalid_params_err</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-function"><span class="hljs-keyword">sub</span> _<span class="hljs-title">http_invalid_params_err</span> ($<span class="hljs-title">why</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> Cpanel::Exception::create_raw( <span class="hljs-string">&#x27;cpsrvd::BadRequest&#x27;</span>, $why );<br>&#125;<br></code></pre></td></tr></table></figure><p>从其中的包名<code>cpsrvd::BadRequest</code>，我们可以追溯到<code>Cpanel/Exception/cpsrvd/BadRequest.pm</code>。这就是线索断绝的地方。尽管我们有很多可用的 Perl 源代码，但是由于没看到对<code>Httpd::ErrorPage</code> 的调用，无法对整个链进行端到端的跟踪。<br>我们经过实践发现，sink在<code>Cpanel::Server::Handlers::Httpd::ErrorPage</code> 。但是我们无法找到初始化这个 Perl 代码的位置。我们怀疑这是嵌入在 cPanel 二进制文件中的，因此我们无法确定这段代码被调用的位置。<br>深入研究<code>Httpd::ErrorPage</code>代码，我们可以看到它接受了一个名为<code>message_html</code>的变量，该变量是此漏洞的sink，因为该变量没有经过任何的过滤。</p><p>查看 cPanel 最新版本的补丁，我们可以看到在<code> Cpanel/Server/Handlers/Httpd/ErrorPage.pm</code>中添加了以下两行:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">++ <span class="hljs-keyword">use</span> Cpanel::Encoder::Tiny               ();<br><br>... omitted <span class="hljs-keyword">for</span> brevity ...<br><br>++ $var<span class="hljs-string">&#123;message_html&#125;</span> = Cpanel::Encoder::Tiny::safe_html_encode_str( $var<span class="hljs-string">&#123;message_html&#125;</span> );<br></code></pre></td></tr></table></figure><h3 id="POC-Proof-of-Concept"><a href="#POC-Proof-of-Concept" class="headerlink" title="POC(Proof of Concept)"></a>POC(Proof of Concept)</h3><p>把我们上面发现到的所有东西放在一起，我们就可以得到一个XSS漏洞的POC，比如下面这个:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/cpanelwebcall/&lt;img%20src=x%20onerror=<span class="hljs-string">&quot;prompt(1)&quot;</span>&gt;aaaaaaaaaaaa<br>http://example.com:2082/cpanelwebcall/&lt;img%20src=x%20onerror=<span class="hljs-string">&quot;prompt(1)&quot;</span>&gt;aaaaaaaaaaaa<br>http://example.com:2086/cpanelwebcall/&lt;img%20src=x%20onerror=<span class="hljs-string">&quot;prompt(1)&quot;</span>&gt;aaaaaaaaaaaa<br>http://example.com:2082/cpanelwebcall/&lt;img%20src=x%20onerror=<span class="hljs-string">&quot;prompt(1)&quot;</span>&gt;aaaaaaaaaaaa<br><br>... potentially other ports ...<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22550391/1687495472229-abb5f687-3181-4aa5-b0f9-09731466822f.png#averageHue=%23fcfcfb&clientId=u7b3fc323-f4db-4&from=paste&height=422&id=u1fec1d14&originHeight=844&originWidth=3180&originalType=binary&ratio=1.7999999523162842&rotation=0&showTitle=false&size=189851&status=done&style=none&taskId=ude343233-a326-44e7-b19e-f0e4e76d1cd&title=&width=1590" alt="image.png"></p><h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><p>这个漏洞的影响是，我们能够在默认配置的 cPanel 中的几乎每个 web 服务器端口上执行任意的 JavaScript。<br>这是因为前面提到的代理规则的缘故。即使在80和443端口上，我们也能够访问<code>/cpanelwebcall/</code>目录，因为它正被 Apache 代理到cPanel管理端口。<br>因此 攻击者不仅可以攻击 cPanel 的管理端口，还可以攻击运行在80和443端口上的应用程序。<br>由于cPanel管理端口容易受到这种跨网站脚本攻击，攻击者可以利用这种漏洞劫持合法用户的 cPanel 会话。</p><h3 id="缓解措施和时间线"><a href="#缓解措施和时间线" class="headerlink" title="缓解措施和时间线"></a>缓解措施和时间线</h3><p>上述xss漏洞可以通过升级到以下任何 cPanel 版本或更高版本来缓解:</p><ul><li>11.109.9999.116</li><li>11.108.0.13</li><li>11.106.0.18</li><li>11.102.0.31</li></ul><p>披露的时间线如下:</p><ul><li>2023年1月23日: 通过 <a href="mailto:&#115;&#101;&#99;&#117;&#114;&#105;&#x74;&#121;&#64;&#x63;&#80;&#97;&#110;&#x65;&#108;&#46;&#110;&#101;&#x74;">&#115;&#101;&#99;&#117;&#114;&#105;&#x74;&#121;&#64;&#x63;&#80;&#97;&#110;&#x65;&#108;&#46;&#110;&#101;&#x74;</a> 向 cPanel 披露 XSS 漏洞。</li><li>2023年1月23日: cPanel 证实他们收到了漏洞并正在进一步调查。</li><li>2023年2月13日: 漏洞已被 cPanel 确认并分配给 SEC-669。几周后将发布针对性的安全修复程序。</li><li>2023年3月1日: 漏洞固定和公开披露在 cPanel 网站上发布。</li></ul><p>cPanel团队在我们向他们披露这个漏洞后，能够在合理的时间内处理和修复这个问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CPanel 具有巨大的攻击面，需要安全研究人员社区给予更多的关注。在我们研究 cPanel 的过程中，最大的阻碍之一是编译成 Perl 的二进制文件。我们相信在这些二进制文件中还有更严重的 bug 有待发现，尽管从逆向工程的角度来看，处理它们是相当痛苦的。<br>我们对 cpsrvd 二进制文件的分析发现，大多数端点在身份验证之前都无法访问，然而/cgi-sys/目录中有大量的二进制文件可能需要更多的关注。<br>这是我们第一次向软件供应商报告一个 bug，这个供应商的软件cPanel有自动更新功能，仅这一缓解措施就保护了大多数 cPanel 网站免受在野攻击。<br>尽管如此，仍然有可能发现大量的 cPanel 网站仍然容易受到攻击，因为它们没有启用自动更新功能。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.assetnote.io/2023/04/26/xss-million-websites-cpanel/">https://blog.assetnote.io/2023/04/26/xss-million-websites-cpanel/</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>翻译</category>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cPanel</tag>
      
      <tag>XSS</tag>
      
      <tag>CVE-2023-29489</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>向日葵远程代码执行漏洞（CNVD-2022-10270）复现</title>
    <link href="/2022/02/19/%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CNVD-2022-10270%EF%BC%89%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/02/19/%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CNVD-2022-10270%EF%BC%89%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">  该漏洞本质就是当主机启动向日葵后，会开启一个http服务，该服务中存在一些未授权访问获取CID的接口，携带该CID去访问/check接口可以执行系统命令<h2 id="0x01复现环境信息"><a href="#0x01复现环境信息" class="headerlink" title="0x01复现环境信息"></a>0x01复现环境信息</h2><p>向日葵版本：10.5.0.29613、11.0.0.33162</p><p>安装程序：SunloginClient_10.5.0.29613_X64.exe、SunloginClient_11.0.0.33162.exe</p><h2 id="0x02复现步骤"><a href="#0x02复现步骤" class="headerlink" title="0x02复现步骤"></a>0x02复现步骤</h2><h3 id="2-1找到向日葵http服务开启的端口"><a href="#2-1找到向日葵http服务开启的端口" class="headerlink" title="2.1找到向日葵http服务开启的端口"></a>2.1找到向日葵http服务开启的端口</h3><p>一种方法是通过系统命令找到向日葵相关服务占用的端口，另一种是查看向日葵的日志，此处主要说第二种<br>右键向日葵托盘图标，选择“日志”选项，即可进入向日葵的日志文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645030155667-501d2603-bb6a-4318-9ad0-6b0fdbff2d95.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=230&id=F3cc5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=460&originWidth=372&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14081&status=done&style=none&taskId=ufc036b00-91bd-4bf5-8b08-ecb68ac99aa&title=&width=186" alt="image.png"><br>找到如图所有的sunlogin_service.xxx格式的日志，在前面几行即可看到日志中打印的服务开启端口，如下图为49671</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645030236963-96a63f26-ab10-404a-9f50-ae8f8f5fe56b.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=250&id=WT1Kd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=1399&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97360&status=done&style=none&taskId=u067c91aa-a73e-41e4-84d9-9bfc220d047&title=&width=699.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645030261453-87f1c221-45ec-4abf-a5a1-6094ba77cf02.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=303&id=E3TsN&margin=%5Bobject%20Object%5D&name=image.png&originHeight=606&originWidth=1498&originalType=binary&ratio=1&rotation=0&showTitle=false&size=103254&status=done&style=none&taskId=ue6b52341-9146-4650-8e2e-644f430862d&title=&width=749" alt="image.png"></p><h3 id="2-2获取CID"><a href="#2-2获取CID" class="headerlink" title="2.2获取CID"></a>2.2获取CID</h3><p>往/cgi-bin/rpc接口构造如下请求包，可以在未授权下获取verify_string,即CID<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645025944094-aa775eb5-2182-4b57-9333-6d024ecb9807.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=484&id=NHc9s&margin=%5Bobject%20Object%5D&name=image.png&originHeight=968&originWidth=1905&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123367&status=done&style=none&taskId=uc92cf4d1-21b0-4205-aad8-2f990790d05&title=&width=952.5" alt="image.png"></p><h3 id="2-3执行命令"><a href="#2-3执行命令" class="headerlink" title="2.3执行命令"></a>2.3执行命令</h3><p>往/check接口构造如下请求包，注意需要将上一步骤获取的CID按照如图格式填充到cookie中，且在url中提供cmd参数，如下图所示ping 127.0.0.1,可以看到成功回显</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /check?cmd=ping%<span class="hljs-number">20127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645026011403-0222385c-9596-41fb-8686-3d6b2f576fbd.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=466&id=ofRYT&margin=%5Bobject%20Object%5D&name=image.png&originHeight=931&originWidth=1680&originalType=binary&ratio=1&rotation=0&showTitle=false&size=150673&status=done&style=none&taskId=u1f4eabb6-b48d-45ee-a550-2f3137e1538&title=&width=840" alt="image.png"><br>修改url如下执行whoami</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /check?cmd=ping..%<span class="hljs-number">2</span>F..%<span class="hljs-number">2</span>F..%<span class="hljs-number">2</span>Fwindows%<span class="hljs-number">2</span>Fsystem<span class="hljs-number">32</span>%<span class="hljs-number">2</span>Fwindowspowershell%<span class="hljs-number">2</span>Fv<span class="hljs-number">1</span>.<span class="hljs-number">0</span>%<span class="hljs-number">2</span>Fpowershell.exe%<span class="hljs-number">20</span>whoami<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645026505340-2facd7f5-1b6a-464a-9fe5-4ccceb6b3687.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=400&id=YK7SX&margin=%5Bobject%20Object%5D&name=image.png&originHeight=799&originWidth=2201&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162221&status=done&style=none&taskId=ue2347fc8-4e31-4208-932c-2061fe98938&title=&width=1100.5" alt="image.png"><br>​</p><p>修改url入下执行ipconfig</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ping</span>..%<span class="hljs-number">2</span>F..%<span class="hljs-number">2</span>F..%<span class="hljs-number">2</span>Fwindows%<span class="hljs-number">2</span>Fsystem<span class="hljs-number">32</span>%<span class="hljs-number">2</span>Fwindowspowershell%<span class="hljs-number">2</span>Fv<span class="hljs-number">1</span>.<span class="hljs-number">0</span>%<span class="hljs-number">2</span>Fpowershell.exe%<span class="hljs-number">20</span>ipconfig<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645027043747-a1f1ba3f-5a90-4294-bc1e-807908860d52.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=602&id=gvYL6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1204&originWidth=1888&originalType=binary&ratio=1&rotation=0&showTitle=false&size=180550&status=done&style=none&taskId=u8ccff2d7-05b5-4fe0-94e1-19597377457&title=&width=944" alt="image.png"></p><h2 id="0x03关于一些执行命令失败的情况和其他说明"><a href="#0x03关于一些执行命令失败的情况和其他说明" class="headerlink" title="0x03关于一些执行命令失败的情况和其他说明"></a>0x03关于一些执行命令失败的情况和其他说明</h2><p>3.1check接口并非没有任何防护，直接执行部分敏感命令时是失败的<br>如下直接执行whoami,会返回commandnotallow<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645027607550-e6d9ed0d-3bed-4e0b-af25-385f526a6c61.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=369&id=MrkNl&margin=%5Bobject%20Object%5D&name=image.png&originHeight=737&originWidth=2099&originalType=binary&ratio=1&rotation=0&showTitle=false&size=323757&status=done&style=none&taskId=uf59dd4f8-c2ae-46d1-b14c-a80b1a16260&title=&width=1049.5" alt="image.png"><br>但是如上文所示，通过调用powershell或cmd,则是可以执行这些命令的<br>​</p><p>3.2执行不合法的命令，会返回error2<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645027729462-72821b1d-037d-4e41-9c4a-207e35e70ab0.png#clientId=u58347649-c010-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=358&id=hvR8N&margin=%5Bobject%20Object%5D&name=image.png&originHeight=716&originWidth=1913&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106741&status=done&style=none&taskId=uc950e457-4922-4285-9e1b-3ce5a05cb4d&title=&width=956.5" alt="image.png"></p><p>3.3获取CID的那个请求，其实也可以是一个GET请求<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645077858917-93e552d7-6ce3-4d3e-8a75-567fecfc22c8.png#clientId=uf883a639-fb85-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=397&id=u53e03e5d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=794&originWidth=2538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=144003&status=done&style=none&taskId=ued59095c-680f-4738-a52b-8952e005ca0&title=&width=1269" alt="image.png"><br>3.4服务开放端口<strong>并非一定是 4W+高位端口</strong>  ，此处我用11.0.0.33162 @ 1307复现服务端口为2175<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645113041308-64c35c25-5933-481c-b4e8-50b3b1931bca.png#clientId=uf883a639-fb85-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=424&id=u5ae7d3d2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=847&originWidth=1903&originalType=binary&ratio=1&rotation=0&showTitle=false&size=157274&status=done&style=none&taskId=u5fbba8ff-4721-4f09-a2f3-51ec786b225&title=&width=951.5" alt="image.png"><br>3.5该漏洞的利用特征还算比较明显的，那么应该如何绕过waf检测呢<br>当前试过进行大小写转换、以及利用/.\混淆,不过都没有执行成功，应该是软件中明确限定了大小写，从一些相关的日志，可以看出，每一个接口疑似都是一个待加载的模块，当我改了大小写之后，找不到这个模块了<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645280177037-526e1246-f235-46de-a707-35eeeb0f3bd2.png#clientId=u20eed5a4-eb19-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=754&id=u7e291adf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1507&originWidth=2521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=730282&status=done&style=none&taskId=u39dbfddf-e3a3-4a15-953b-c77694665ae&title=&width=1260.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22550391/1645280202805-941680fe-1746-4a63-92e4-56c9982ab5c0.png#clientId=u20eed5a4-eb19-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=477&id=u6d4825a9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=953&originWidth=2489&originalType=binary&ratio=1&rotation=0&showTitle=false&size=431718&status=done&style=none&taskId=uea7fd1f1-9fd6-4ede-bfbc-e9782d74682&title=&width=1244.5" alt="image.png"><br>后续等我学了逆向再研究下</p><h2 id="0x04参考"><a href="#0x04参考" class="headerlink" title="0x04参考"></a><strong>0x04参考</strong></h2><p> Sp4ce 师傅写的向日葵远程命令执行漏洞分析文档</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>向日葵</tag>
      
      <tag>远程命令执行</tag>
      
      <tag>CNVD-2022-10270</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub环境搭建</title>
    <link href="/2021/11/07/vulhub%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/11/07/vulhub%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">  <h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h2><p>系统又重装了，又要重新安装下vulhub，总体来说官方的文档很详细，重装花费不了多少时间，可见一个好的文档对于一个项目来说多么重要，产品推广思路学起来</p><h2 id="二-具体步骤"><a href="#二-具体步骤" class="headerlink" title="二.具体步骤"></a>二.具体步骤</h2><h3 id="2-1安装docker和python环境"><a href="#2-1安装docker和python环境" class="headerlink" title="2.1安装docker和python环境"></a>2.1安装docker和python环境</h3><p>这个我本地已经有了，不做太多说明<br>​</p><h3 id="2-2下载vulhub项目源码"><a href="#2-2下载vulhub项目源码" class="headerlink" title="2.2下载vulhub项目源码"></a>2.2下载vulhub项目源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/vulhub/vulhub.git<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22550391/1636195596945-a1f4f08a-4f58-42f1-a0ee-59f4404dd9dc.png#clientId=u97bb46d3-934f-4&from=paste&height=185&id=u6de35797&margin=%5Bobject%20Object%5D&name=image.png&originHeight=369&originWidth=1697&originalType=binary&ratio=1&size=74986&status=done&style=none&taskId=uf0ddae8f-e44f-460f-adb6-74c88e3e9a4&width=848.5" alt="image.png"></p><h3 id="2-3安装docker-compose"><a href="#2-3安装docker-compose" class="headerlink" title="2.3安装docker-compose"></a>2.3安装docker-compose</h3><p>​</p><blockquote><p>Docker Compose is a tool for running multi-container applications on Docker defined using the <a href="https://compose-spec.io/">Compose file format</a>.</p></blockquote><p>docker-compose是一个能将一组关联密切的容器管理起来的工具<br>​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install docker-compose<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22550391/1636195751687-93551090-1d5b-4b0e-9fc9-33b6ec3676b3.png#clientId=u8143a9c2-0471-4&from=paste&height=286&id=u62b56301&margin=%5Bobject%20Object%5D&name=image.png&originHeight=571&originWidth=1845&originalType=binary&ratio=1&size=117576&status=done&style=none&taskId=u36037c77-2bee-4ec7-b902-dbf9a020147&width=922.5" alt="image.png"></p><h3 id="2-4启动环境"><a href="#2-4启动环境" class="headerlink" title="2.4启动环境"></a>2.4启动环境</h3><p>上述步骤都正常完成后，就进入其中的某个漏洞对的目录，执行如下命令，构建相应的漏洞环境了,一下以struct2的s2-059为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 自动化编译环境</span><br>docker-compose build<br><br><span class="hljs-comment"># 启动整个环境</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22550391/1636196023492-d5764475-28ea-49db-a0fd-d27573ba7f58.png#clientId=u8143a9c2-0471-4&from=paste&height=182&id=u806c7eee&margin=%5Bobject%20Object%5D&name=image.png&originHeight=364&originWidth=1988&originalType=binary&ratio=1&size=75902&status=done&style=none&taskId=u22a7e2b2-40aa-4759-b1cb-d31627f4acc&width=994" alt="image.png"></p><h3 id="2-5对于容器环境的一些操作"><a href="#2-5对于容器环境的一些操作" class="headerlink" title="2.5对于容器环境的一些操作"></a>2.5对于容器环境的一些操作</h3><p>2.5.1产看容器运行状况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22550391/1636273007096-0bbbf2b8-34d4-421e-a7ef-0bce782faec1.png#clientId=u63fddb2a-d089-4&from=paste&height=144&id=uf316811f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=287&originWidth=2345&originalType=binary&ratio=1&size=62356&status=done&style=none&taskId=ub1497f11-f430-47a1-9cb9-c2c0e4eb210&width=1172.5" alt="image.png"><br>2.5.2进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器name或id/bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22550391/1636273072202-8a0709b6-a3f1-4074-89a0-a31fe2d79600.png#clientId=u63fddb2a-d089-4&from=paste&height=53&id=ua1778639&margin=%5Bobject%20Object%5D&name=image.png&originHeight=106&originWidth=1914&originalType=binary&ratio=1&size=24709&status=done&style=none&taskId=uacae3ebd-f96b-4794-b631-3673a79c3da&width=957" alt="image.png"><br>2.5.3容器启停</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start 容器name或id<br>docker stop  容器name或id<br>docker restart 容器name或id<br></code></pre></td></tr></table></figure><p>​</p><h3 id="2-5测试完成后，删除整个环境"><a href="#2-5测试完成后，删除整个环境" class="headerlink" title="2.5测试完成后，删除整个环境"></a>2.5测试完成后，删除整个环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose down -v<br></code></pre></td></tr></table></figure><h3 id="2-6尝试启用docker加速"><a href="#2-6尝试启用docker加速" class="headerlink" title="2.6尝试启用docker加速"></a>2.6尝试启用docker加速</h3><p>​</p><p>访问<a href="https://www.daocloud.io/mirror">https://www.daocloud.io/mirror</a>，将获得到的仓库镜像地址配置到自己本地安装的docker配置里面，并apply<br>(我使用加速和不加速好像没啥区别，后面还是自己翻墙了）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/22550391/1636273318817-dd1a076b-31ed-42fb-b385-4d60a3dd995b.png#clientId=u63fddb2a-d089-4&from=paste&height=718&id=ue22f501f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1435&originWidth=2555&originalType=binary&ratio=1&size=192550&status=done&style=none&taskId=ue550fe0d-6198-460b-8770-a466c9ce388&width=1277.5" alt="image.png"></p><h2 id="三-参考链接"><a href="#三-参考链接" class="headerlink" title="三.参考链接"></a>三.参考链接</h2><p><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a><br><a href="https://vulhub.org/">https://vulhub.org/</a><br><a href="https://vulhub.org/#/docs/docker-accelerator/">https://vulhub.org/#/docs/docker-accelerator/</a>  </p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我系统又重装了</title>
    <link href="/2021/09/20/%E6%88%91%E7%B3%BB%E7%BB%9F%E5%8F%88%E9%87%8D%E8%A3%85%E4%BA%86/"/>
    <url>/2021/09/20/%E6%88%91%E7%B3%BB%E7%BB%9F%E5%8F%88%E9%87%8D%E8%A3%85%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>eee<br>某天晚上升级了下系统，结果崩了，之前又没做快照…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/20/hello-world/"/>
    <url>/2021/09/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
